package org.oddys.timetracking.connection;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

public class ConnectionWrapper implements AutoCloseable {
    private static final Logger log = LogManager.getLogger();
    private static ConnectionWrapper INSTANCE = new ConnectionWrapper();
    private ThreadLocal<Connection> connectionThreadLocal = ThreadLocal
            .withInitial(() -> ConnectionPool.getInstance().getConnection());
    private ThreadLocal<Boolean> isTransactionThreadLocal = ThreadLocal.withInitial(() -> false);

    private ConnectionWrapper() { ;
    }

    public static ConnectionWrapper getInstance() {
        return INSTANCE;
    }

    public Connection getConnection() {
        return connectionThreadLocal.get();
    }

    public void setTransaction(boolean isTransaction) {
        isTransactionThreadLocal.set(isTransaction);
    }

    public PreparedStatement prepareStatement(String query) throws SQLException {
        return connectionThreadLocal.get().prepareStatement(query);
    }

    public PreparedStatement prepareStatement(String query, int autoGeneratedKeys)
            throws SQLException {
        return connectionThreadLocal.get().prepareStatement(query, autoGeneratedKeys);
    }

    public Statement createStatement() throws SQLException {
        return connectionThreadLocal.get().createStatement();
    }

    @Override
    public void close() {
        if (!isTransactionThreadLocal.get()) {
            try {
                connectionThreadLocal.get().close();
            } catch (SQLException e) {
                log.error("Connection wrapper failed to close a connection", e);
            }
            connectionThreadLocal.remove();
        }
    }
}
